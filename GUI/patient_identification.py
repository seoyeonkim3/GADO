# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'patient_home.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import warnings
warnings.filterwarnings("ignore", category=UserWarning, module='google.protobuf.symbol_database')
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtWidgets import QWidget

from absl import logging
logging.set_verbosity(logging.ERROR)
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
import mediapipe as mp
import csv
import time
import numpy as np
from PIL import Image, ImageDraw, ImageFont


class CameraThread(QtCore.QThread):
    change_pixmap_signal = QtCore.pyqtSignal(QtGui.QImage)
    recognition_complete = QtCore.pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.running = True
        self.mp_drawing = mp.solutions.drawing_utils
        self.mp_face_mesh = mp.solutions.face_mesh.FaceMesh(
            max_num_faces=1,
            refine_landmarks=True,
            min_detection_confidence=0.5,
            min_tracking_confidence=0.5
        )
        self.ellipse_center = (320, 240)
        self.axes_length = (100, 130)
        self.start_time = None
        self.recording_time = 3

    def run(self):
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            print("cannot open camera")
            self.running = False
            return

        while self.running:
            ret, image = self.cap.read()
            if not ret:
                #print("Ignoring empty camera frame.")
                continue

            image.flags.writeable = False
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            results = self.mp_face_mesh.process(image)

            image.flags.writeable = True
            image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

            if results.multi_face_landmarks:
                for face_landmarks in results.multi_face_landmarks:
                    face_center_x = int(face_landmarks.landmark[1].x * image.shape[1])
                    face_center_y = int(face_landmarks.landmark[1].y * image.shape[0])
                    face_center = (face_center_x, face_center_y)

                    if self.is_point_in_ellipse(face_center, self.ellipse_center, self.axes_length):
                        if self.start_time is None:
                            self.start_time = time.time()
                        elif time.time() - self.start_time >= self.recording_time:
                            current_landmarks = []
                            for landmark in face_landmarks.landmark:
                                current_landmarks.append([landmark.x, landmark.y, landmark.z])
                            current_landmarks = self.normalize_landmarks(current_landmarks)
                            current_landmarks = np.array(current_landmarks, dtype=np.float32).flatten()

                            # 여기서 신원 확인 관련 처리가 이루어져야 하지만, FAISS와 유사도 비교 코드를 제거했습니다.
                            message = "신원이 확인되었습니다"  # 더미 메시지

                            self.recognition_complete.emit(message)
                            self.stop()
                            return
                    else:
                        self.start_time = None

                    self.mp_drawing.draw_landmarks(
                        image=image,
                        landmark_list=face_landmarks,
                        connections=mp.solutions.face_mesh.FACEMESH_TESSELATION,
                        landmark_drawing_spec=None,
                        connection_drawing_spec=self.mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=1, circle_radius=1)
                    )

            else:
                self.start_time = None

            cv2.ellipse(image, self.ellipse_center, self.axes_length, 0, 0, 360, (0, 255, 0), 2)
            rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            h, w, ch = rgb_image.shape
            bytes_per_line = ch * w
            qt_image = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
            qt_image = qt_image.scaled(640, 480, QtCore.Qt.KeepAspectRatio)
            self.change_pixmap_signal.emit(qt_image)

        self.cap.release()

    def is_point_in_ellipse(self, point, center, axes):
        px, py = point
        cx, cy = center
        rx, ry = axes
        return ((px - cx) ** 2) / rx ** 2 + ((py - cy) ** 2) / ry ** 2 <= 1

    def stop(self):
        self.running = False
        if self.cap.isOpened():
            self.cap.release()
        self.wait()

    def normalize_landmarks(self, landmarks):
        landmarks = np.array(landmarks)
        center = np.mean(landmarks, axis=0)
        return landmarks - center


class Ui_Dialog_identification(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(800, 480)
        Dialog.setStyleSheet("QLabel{font-size: 30px; font-family: \'Arial\';}\n"
"")
        self.HOME_icon = QtWidgets.QLabel(Dialog)
        self.HOME_icon.setGeometry(QtCore.QRect(310, 0, 161, 131))
        self.HOME_icon.setStyleSheet("QLabel#HOME_icon {\n"
"    border-image: url(:/home/home.png) 0 0 0 0 stretch stretch;\n"
"}")
        self.HOME_icon.setText("")
        self.HOME_icon.setObjectName("HOME_icon")
        self.HOME_text = QtWidgets.QLabel(Dialog)
        self.HOME_text.setGeometry(QtCore.QRect(300, 140, 211, 61))
        self.HOME_text.setObjectName("HOME_text")
        self.horizontalLayoutWidget = QtWidgets.QWidget(Dialog)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(80, 240, 651, 211))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_navigation = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_navigation.setStyleSheet("QPushButton{font-size: 24px; font-family: \'Arial\';}\n"
"QPushButton:hover {\n"
"background-color: skyblue;\n"
"}")
        self.pushButton_navigation.setObjectName("pushButton_navigation")
        self.horizontalLayout.addWidget(self.pushButton_navigation)
        self.pushButton_receipt = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_receipt.setStyleSheet("QPushButton{font-size: 24px; font-family: \'Arial\';}\n"
"QPushButton:hover {\n"
"background-color: skyblue;\n"
"}")
        self.pushButton_receipt.setObjectName("pushButton_receipt")
        self.horizontalLayout.addWidget(self.pushButton_receipt)

        self.pushButton_identification = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_identification.setStyleSheet("QPushButton{font-size: 24px; font-family: \'Arial\';}\n"
                                              "QPushButton:hover {\n"
                                              "background-color: skyblue;\n"
                                              "}")
        self.pushButton_identification.setObjectName("pushButton_identification")
        self.horizontalLayout.addWidget(self.pushButton_identification)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.HOME_text.setText(_translate("Dialog", "HOME (환자용)"))
        self.pushButton_navigation.setText(_translate("Dialog", "길찾기"))
        self.pushButton_receipt.setText(_translate("Dialog", "접수"))
        self.pushButton_identification.setText(_translate("Dialog", "신분증 찾기"))
import home_rc

    
if __name__ == "__main__":
    app = QApplication(sys.argv)

    # QDialog를 생성하고 Ui_Dialog_identification의 UI를 설정합니다.
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog_identification()
    ui.setupUi(Dialog)

    # 창 크기 설정 및 창 표시
    Dialog.resize(800, 480)
    Dialog.show()

    # 이벤트 루프 시작
 
